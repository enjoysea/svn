一、工具下载地址
1、TortoiseSVN: http://tortoisesvn.net/downloads.html
2、VisualSVN: http://www.visualsvn.com/server/download

-------------------------------------------------------------------------------------------

二、
先创建好A用户的文件
1、右键 → TortoiseSVN → Settings → Saved Data → Authentication data Clear all → 确定
2、右键 → SVN Checkout... → Test修改：B_Test → Accept the certificate permanently → B b
3、Save authentication 去掉 对勾
4、进入BTest，修改Test.java：System.out.println（"B的代码！"）; 
5、SVN Commit → 
6、回到A用户的Test，右键→SVN Update，发现文件变化了
7、我怎么知道谁动了我的代码，怎么找回代码？
（1）Test.java右键 → TortoiseSVN → Show log
	5 B也修改了内容
	4 A修改了里面的内容
	3 A创建一个文件

8、经过商议还是用A的代码
9、服务端来解决这个问题
	（1）4 A修改了里面的内容 → 右键 → Revert to this revision → Revert
	（2）继续提交
10、假如B又开始修改了
	（1）B_Test中，Test.java 右键 → SVN Update
	（2）继续修改：Test.java，
		public Test(){
			System.out.priintln("B的代码");
		}

11、提交 
注释：我觉得A的代码有bug
12、Test.java上右键 TortoiseSVN → Show log
13、B误操作将Test.java给删除了
14、提交
15、A也不知道，又去Update代码
16、在根下，TortoiseSVN → Show log
17、B删除之前还修改过，上面点击第2个，下面也点击，右击，Save revision to ...，保存到磁盘上，
这个文件是带版本号的，打开
18、重新命名Test.java,粘贴到Test中，再次提交

-------------------------------------------------------------------------------------------

三、
（一）第一种情况
1、A、B的代码在修改前，都是最新的代码
public Test () {

}

1、A修改
public Test () {
	System.out.priintln("A的代码！");
}

2、B修改
public Test () {
	System.out.priintln("B的代码！");
}

3、他们在修改前都是最新的代码
4、B的手比较快，先提交的代码
5、回到A提交
6、提交失败，告诉这个文件是过时的了，需要更新
7、按照提示去操作，OK → Update

（二）第二种情况，直接合并不了
1、A 
public Test () {
	// System.out.priintln("A的代码！");
}
public Test () {
	System.out.priintln("B的代码！");
}

2、B
SVN Update
public Test () {
	System.out.priintln("B的代码！");
}
public Test () {
	System.out.priintln("B的代码！");
}

3、B又先提交
4、A再提交
5、千万不要再点OK提交了，这是一个冲突的版本
6、出现黄色感叹号，说明SVN帮你自动合并已经失败了
7、文件的含义
（1）Test.java.mine 你的代码
（2）Test.java.r3你没改之前，你认为是最新的版本
（3）Test.java.r4 真正服务器端SVN的代码，被认可的

8、最好不要在上面直接修改
9、如果认为Test.java.r3你没改之前是正确的版本，复制Test.java.r3，
后缀名修改掉，再粘贴回来
10、如果认为B的代码正确，就直接，右击黄色感叹号，TortoiseSVN → Revert
11、三个文件也消失了，问题解决了
12、如果用自己的方式去解决，那三个文件需要手动删除

-------------------------------------------------------------------------------------------

四、
1、代码多，产生冲突不止一处，A和B各有有效的代码，又希望都能提交上去
2、A和B同时拿到下面的代码
public Test () {
	System.out.priintln("B的代码！");
}
public Test () {
	System.out.priintln("B的代码！");
}


3、A修改
public Test () {
	System.out.priintln("B的代码！");
}
public Test () {
	System.out.priintln("A希望改成这样");
}
public MethodA () {
	System.out.priintln("A新加的方法");
}
4、B修改
public Test () {
	System.out.priintln("B的代码！");
}
public Test () {
	System.out.priintln("B希望改成这样");
}
public MethodB () {
	System.out.priintln("这是B新加的，不许乱改");
}

4、B手快，又先提交
5、切换到A，提交
6、点OK，提示：Update还是怎么办
7、明明知道冲突，就不要再更新了，容易产生冲突文件
8、把我的代码Test.java先复制到一边
9、文件右键，TortoiseSVN → Revert，恢复成上一次取的最新代码
10、然后再取更新
11、将之前的文件修改成Test1.java(8条的文件)
12、选中这两个文件，TortoiseSVN → Diff
13、两个人都在场，共同修改一下文件：Test.java
拷贝，继续追加Test.java
public MethodA () {
	System.out.priintln("A新加的方法");
}
14、再去提交，Test1.java就可以不要了
15、B再取一下最新的代码

-------------------------------------------------------------------------------------------

五、还有一种比较难解决的
1、B修改：B
public MethodA () {
	System.out.priintln("B新加的方法");
}
2、改完后提交
3、A一大早来了，取了一下代码，并没有发现
4、又加了一个方法重载
public MethodA (int i) {
	System.out.priintln("B新加的方法");
}
5、A又提交了
6、这个问题就埋下了隐患
7、B也更新了
8、版本已经过去很多版了，先演示两三版
修改：System.out.priintln("A与C希望改成这样");
public Test () {
	System.out.priintln("B的代码！");
}
public Test () {
	System.out.priintln("A希望改成这样");
	System.out.priintln("A与C希望改成这样");
}
public MethodB () {
	System.out.priintln("这是B新加的，不许乱改");
}
public MethodA () {
	System.out.priintln("B新加的方法");
}
public MethodA (int i) {
	System.out.priintln("B新加的方法");
}

提交
9、B更新
10、找到修改这句话的作者
11、从历史记录进行比对
Test.java右键TortoiseSVN → Show log
两版两版比对，相中，右键Compare revisions
12、找到修改的作者和版本
13、与B商量

-------------------------------------------------------------------------------------------

实战：
建议先将本地代码覆盖到本地svn环境 → Update → 解决完冲突 → Commit ✔

-------------------------------------------------------------------------------------------

Tip：

1、参考：[svn]svn conflict 冲突解决
https://www.cnblogs.com/aaronLinux/p/5521844.html

2、SVN创建分支/合并分支/切换分支
https://www.cnblogs.com/andy2simple/p/5386256.html












































































